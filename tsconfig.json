{
  "files": [],
  "compilerOptions": {
    "target": "ESNext",
    "useDefineForClassFields": true,
    "module": "ESNext",
    "lib": ["ESNext", "DOM", "DOM.Iterable"],
    "paths": {
      "@/*": ["./src/*"],
      "~/*": ["./*"]
    },

    /* Bundler mode */
    "moduleResolution": "node",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "preserve",

    /* Linting */
    "noUnusedLocals": false,
    "noUnusedParameters": true,
    "allowJs": true, // 允许编译器编译JS，JSX文件
    "checkJs": true, // 允许在JS文件中报错，通常与allowJS一起使用
    "removeComments": true, // 删除注释
    "esModuleInterop": true, // 为导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性
    "skipLibCheck": true, // 用来控制是否在编译时进行库文件检查的
    /* 严格检查选项 */
    "strict": true, // 开启所有严格的类型检查
    "noImplicitAny": false, // 不允许隐式的any类型
    /* 额外检查 */
    "noFallthroughCasesInSwitch": true, //检查switch中是否含有case没有使用break跳出
    "noPropertyAccessFromIndexSignature": false, //是否通过" . “(obj.key) 语法访问字段和"索引”( obj[“key”])， 以及在类型中声明属性的方式之间的一致性
    /* 高级选项 */
    "forceConsistentCasingInFileNames": true, //是否强制代码中使用的模块文件名必须和文件系统中的文件名保持大小写一致
    "extendedDiagnostics": false, //是否查看 TS 在编译时花费的时间
    "noEmitOnError": true, //有错误时不进行编译
    "resolveJsonModule": true, //是否解析 JSON 模块
    "allowSyntheticDefaultImports": true, //指定允许从没有默认导出的模块中默认导入
    "types": ["node", "vite/client"]
  },
  "include": ["src/**/*.ts", "src/**/*.d.ts", "src/**/*.tsx", "src/**/*.vue", "vite/**/*.d.ts", "global.d.ts"],
  "exclude": ["node_modules", "dist"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
